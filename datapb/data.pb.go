// Code generated by protoc-gen-go. DO NOT EDIT.
// source: datapb/data.proto

/*
Package datapb is a generated protocol buffer package.

It is generated from these files:
	datapb/data.proto

It has these top-level messages:
	DataHash
	DataEntry
	Data
	DataArray
*/
package datapb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// `NullValue` is a singleton enumeration to represent the null value for the
// `Value` type union.
type NullValue int32

const (
	// Null value.
	NullValue_NULL_VALUE NullValue = 0
)

var NullValue_name = map[int32]string{
	0: "NULL_VALUE",
}
var NullValue_value = map[string]int32{
	"NULL_VALUE": 0,
}

func (x NullValue) String() string {
	return proto.EnumName(NullValue_name, int32(x))
}
func (NullValue) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// `DataHash` represents an ordered hash of Data values, consisting of fields
// which map to dynamically typed values. In some languages, `DataHash`
// might be supported by a native representation. For example, in scripting
// languages like JS, a data hash is represented as an object.
type DataHash struct {
	// Ordered list of associations between strings and dynamically typed values.
	Entries []*DataEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *DataHash) Reset()                    { *m = DataHash{} }
func (m *DataHash) String() string            { return proto.CompactTextString(m) }
func (*DataHash) ProtoMessage()               {}
func (*DataHash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DataHash) GetEntries() []*DataEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

// `DataEntry` represents one association between a key and a value
// in the ordered `DataHash`
type DataEntry struct {
	Key   *Data `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *Data `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *DataEntry) Reset()                    { *m = DataEntry{} }
func (m *DataEntry) String() string            { return proto.CompactTextString(m) }
func (*DataEntry) ProtoMessage()               {}
func (*DataEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DataEntry) GetKey() *Data {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DataEntry) GetValue() *Data {
	if m != nil {
		return m.Value
	}
	return nil
}

// `Data` represents a dynamically typed value which can be either
// null, an integer, a float, a string, a boolean, a recursive data hash, or an
// array of data.
type Data struct {
	// The kind of value.
	//
	// Types that are valid to be assigned to Kind:
	//	*Data_UndefValue
	//	*Data_IntegerValue
	//	*Data_FloatValue
	//	*Data_StringValue
	//	*Data_BooleanValue
	//	*Data_HashValue
	//	*Data_ArrayValue
	//	*Data_BinaryValue
	//	*Data_Reference
	Kind isData_Kind `protobuf_oneof:"kind"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isData_Kind interface {
	isData_Kind()
}

type Data_UndefValue struct {
	UndefValue NullValue `protobuf:"varint,1,opt,name=undef_value,json=undefValue,enum=puppet.datapb.NullValue,oneof"`
}
type Data_IntegerValue struct {
	IntegerValue int64 `protobuf:"varint,2,opt,name=integer_value,json=integerValue,oneof"`
}
type Data_FloatValue struct {
	FloatValue float64 `protobuf:"fixed64,3,opt,name=float_value,json=floatValue,oneof"`
}
type Data_StringValue struct {
	StringValue string `protobuf:"bytes,4,opt,name=string_value,json=stringValue,oneof"`
}
type Data_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,5,opt,name=boolean_value,json=booleanValue,oneof"`
}
type Data_HashValue struct {
	HashValue *DataHash `protobuf:"bytes,6,opt,name=hash_value,json=hashValue,oneof"`
}
type Data_ArrayValue struct {
	ArrayValue *DataArray `protobuf:"bytes,7,opt,name=array_value,json=arrayValue,oneof"`
}
type Data_BinaryValue struct {
	BinaryValue []byte `protobuf:"bytes,8,opt,name=binary_value,json=binaryValue,proto3,oneof"`
}
type Data_Reference struct {
	Reference int64 `protobuf:"varint,9,opt,name=reference,oneof"`
}

func (*Data_UndefValue) isData_Kind()   {}
func (*Data_IntegerValue) isData_Kind() {}
func (*Data_FloatValue) isData_Kind()   {}
func (*Data_StringValue) isData_Kind()  {}
func (*Data_BooleanValue) isData_Kind() {}
func (*Data_HashValue) isData_Kind()    {}
func (*Data_ArrayValue) isData_Kind()   {}
func (*Data_BinaryValue) isData_Kind()  {}
func (*Data_Reference) isData_Kind()    {}

func (m *Data) GetKind() isData_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *Data) GetUndefValue() NullValue {
	if x, ok := m.GetKind().(*Data_UndefValue); ok {
		return x.UndefValue
	}
	return NullValue_NULL_VALUE
}

func (m *Data) GetIntegerValue() int64 {
	if x, ok := m.GetKind().(*Data_IntegerValue); ok {
		return x.IntegerValue
	}
	return 0
}

func (m *Data) GetFloatValue() float64 {
	if x, ok := m.GetKind().(*Data_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *Data) GetStringValue() string {
	if x, ok := m.GetKind().(*Data_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *Data) GetBooleanValue() bool {
	if x, ok := m.GetKind().(*Data_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

func (m *Data) GetHashValue() *DataHash {
	if x, ok := m.GetKind().(*Data_HashValue); ok {
		return x.HashValue
	}
	return nil
}

func (m *Data) GetArrayValue() *DataArray {
	if x, ok := m.GetKind().(*Data_ArrayValue); ok {
		return x.ArrayValue
	}
	return nil
}

func (m *Data) GetBinaryValue() []byte {
	if x, ok := m.GetKind().(*Data_BinaryValue); ok {
		return x.BinaryValue
	}
	return nil
}

func (m *Data) GetReference() int64 {
	if x, ok := m.GetKind().(*Data_Reference); ok {
		return x.Reference
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Data) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Data_OneofMarshaler, _Data_OneofUnmarshaler, _Data_OneofSizer, []interface{}{
		(*Data_UndefValue)(nil),
		(*Data_IntegerValue)(nil),
		(*Data_FloatValue)(nil),
		(*Data_StringValue)(nil),
		(*Data_BooleanValue)(nil),
		(*Data_HashValue)(nil),
		(*Data_ArrayValue)(nil),
		(*Data_BinaryValue)(nil),
		(*Data_Reference)(nil),
	}
}

func _Data_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Data)
	// kind
	switch x := m.Kind.(type) {
	case *Data_UndefValue:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.UndefValue))
	case *Data_IntegerValue:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IntegerValue))
	case *Data_FloatValue:
		b.EncodeVarint(3<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.FloatValue))
	case *Data_StringValue:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *Data_BooleanValue:
		t := uint64(0)
		if x.BooleanValue {
			t = 1
		}
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Data_HashValue:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashValue); err != nil {
			return err
		}
	case *Data_ArrayValue:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ArrayValue); err != nil {
			return err
		}
	case *Data_BinaryValue:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.BinaryValue)
	case *Data_Reference:
		b.EncodeVarint(9<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Reference))
	case nil:
	default:
		return fmt.Errorf("Data.Kind has unexpected type %T", x)
	}
	return nil
}

func _Data_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Data)
	switch tag {
	case 1: // kind.undef_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &Data_UndefValue{NullValue(x)}
		return true, err
	case 2: // kind.integer_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &Data_IntegerValue{int64(x)}
		return true, err
	case 3: // kind.float_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Kind = &Data_FloatValue{math.Float64frombits(x)}
		return true, err
	case 4: // kind.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Kind = &Data_StringValue{x}
		return true, err
	case 5: // kind.boolean_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &Data_BooleanValue{x != 0}
		return true, err
	case 6: // kind.hash_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataHash)
		err := b.DecodeMessage(msg)
		m.Kind = &Data_HashValue{msg}
		return true, err
	case 7: // kind.array_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataArray)
		err := b.DecodeMessage(msg)
		m.Kind = &Data_ArrayValue{msg}
		return true, err
	case 8: // kind.binary_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Kind = &Data_BinaryValue{x}
		return true, err
	case 9: // kind.reference
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &Data_Reference{int64(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Data_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Data)
	// kind
	switch x := m.Kind.(type) {
	case *Data_UndefValue:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.UndefValue))
	case *Data_IntegerValue:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IntegerValue))
	case *Data_FloatValue:
		n += proto.SizeVarint(3<<3 | proto.WireFixed64)
		n += 8
	case *Data_StringValue:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *Data_BooleanValue:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += 1
	case *Data_HashValue:
		s := proto.Size(x.HashValue)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Data_ArrayValue:
		s := proto.Size(x.ArrayValue)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Data_BinaryValue:
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.BinaryValue)))
		n += len(x.BinaryValue)
	case *Data_Reference:
		n += proto.SizeVarint(9<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Reference))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// `DataArray` is a wrapper around a repeated field of Data values.
type DataArray struct {
	// Repeated field of dynamically typed values.
	Values []*Data `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *DataArray) Reset()                    { *m = DataArray{} }
func (m *DataArray) String() string            { return proto.CompactTextString(m) }
func (*DataArray) ProtoMessage()               {}
func (*DataArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DataArray) GetValues() []*Data {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*DataHash)(nil), "puppet.datapb.DataHash")
	proto.RegisterType((*DataEntry)(nil), "puppet.datapb.DataEntry")
	proto.RegisterType((*Data)(nil), "puppet.datapb.Data")
	proto.RegisterType((*DataArray)(nil), "puppet.datapb.DataArray")
	proto.RegisterEnum("puppet.datapb.NullValue", NullValue_name, NullValue_value)
}

func init() { proto.RegisterFile("datapb/data.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x5d, 0x8b, 0x9b, 0x40,
	0x14, 0x86, 0x9d, 0x9a, 0x75, 0xe3, 0x31, 0xbb, 0xb4, 0xd3, 0x8b, 0x0a, 0x85, 0x62, 0x2d, 0x0b,
	0x76, 0x4b, 0x0d, 0xa4, 0x37, 0x0b, 0x0b, 0x85, 0x5d, 0xba, 0xe0, 0x45, 0xc8, 0x85, 0x90, 0x5c,
	0x14, 0x4a, 0x18, 0x93, 0x31, 0xda, 0xd8, 0x51, 0xc6, 0xb1, 0xe0, 0x8f, 0xe9, 0x7f, 0x2d, 0xf3,
	0x11, 0x43, 0xa9, 0x7b, 0x25, 0xf3, 0x9e, 0xe7, 0x3d, 0xc7, 0xf3, 0x01, 0xaf, 0xf6, 0x44, 0x90,
	0x26, 0x9b, 0xcb, 0x4f, 0xdc, 0xf0, 0x5a, 0xd4, 0xf8, 0xaa, 0xe9, 0x9a, 0x86, 0x8a, 0x58, 0x47,
	0xc2, 0xaf, 0x30, 0xfd, 0x46, 0x04, 0x49, 0x48, 0x5b, 0xe0, 0x05, 0x5c, 0x52, 0x26, 0x78, 0x49,
	0x5b, 0x1f, 0x05, 0x76, 0xe4, 0x2d, 0xfc, 0xf8, 0x1f, 0x38, 0x96, 0xe4, 0x13, 0x13, 0xbc, 0x4f,
	0x4f, 0x60, 0xf8, 0x03, 0xdc, 0x41, 0xc5, 0x37, 0x60, 0x1f, 0x69, 0xef, 0xa3, 0x00, 0x45, 0xde,
	0xe2, 0xf5, 0x88, 0x39, 0x95, 0x71, 0xfc, 0x11, 0x2e, 0x7e, 0x93, 0xaa, 0xa3, 0xfe, 0x8b, 0xe7,
	0x41, 0x4d, 0x84, 0x7f, 0x6c, 0x98, 0xc8, 0x37, 0xbe, 0x07, 0xaf, 0x63, 0x7b, 0x9a, 0x6f, 0xb5,
	0x53, 0x96, 0xb8, 0xfe, 0xef, 0xff, 0x56, 0x5d, 0x55, 0x6d, 0x64, 0x3c, 0xb1, 0x52, 0x50, 0xb8,
	0x7a, 0xe1, 0x1b, 0xb8, 0x2a, 0x99, 0xa0, 0x07, 0xca, 0xb7, 0xe7, 0xc2, 0x76, 0x62, 0xa5, 0x33,
	0x23, 0x6b, 0xec, 0x3d, 0x78, 0x79, 0x55, 0x13, 0x61, 0x20, 0x3b, 0x40, 0x11, 0x92, 0x99, 0x94,
	0xa8, 0x91, 0x0f, 0x30, 0x6b, 0x05, 0x2f, 0xd9, 0xc1, 0x30, 0x93, 0x00, 0x45, 0x6e, 0x62, 0xa5,
	0x9e, 0x56, 0x87, 0x72, 0x59, 0x5d, 0x57, 0x94, 0x30, 0x43, 0x5d, 0x04, 0x28, 0x9a, 0xca, 0x72,
	0x46, 0xd6, 0xd8, 0x1d, 0x40, 0x41, 0xda, 0xc2, 0x30, 0x8e, 0x9a, 0xc5, 0x9b, 0x91, 0x59, 0xc8,
	0xdd, 0x24, 0x56, 0xea, 0x4a, 0x58, 0x3b, 0xef, 0xc1, 0x23, 0x9c, 0x93, 0xde, 0x58, 0x2f, 0x95,
	0x75, 0x6c, 0x59, 0x0f, 0x92, 0x92, 0x2d, 0x28, 0x7c, 0x68, 0x21, 0x2b, 0x19, 0xe1, 0x27, 0xf7,
	0x34, 0x40, 0xd1, 0x4c, 0xb6, 0xa0, 0x55, 0x0d, 0xbd, 0x03, 0x97, 0xd3, 0x9c, 0x72, 0xca, 0x76,
	0xd4, 0x77, 0xcd, 0xb4, 0xce, 0xd2, 0xa3, 0x03, 0x93, 0x63, 0xc9, 0xf6, 0xe1, 0x9d, 0x5e, 0xbf,
	0xaa, 0x83, 0x3f, 0x81, 0xa3, 0x52, 0x9e, 0xce, 0x67, 0x74, 0xb1, 0x06, 0xb9, 0x7d, 0x0b, 0xee,
	0xb0, 0x2e, 0x7c, 0x0d, 0xb0, 0x5a, 0x2f, 0x97, 0xdb, 0xcd, 0xc3, 0x72, 0xfd, 0xf4, 0xd2, 0x7a,
	0xbc, 0xfd, 0x1e, 0x1d, 0x4a, 0x51, 0x74, 0x59, 0xbc, 0xab, 0x7f, 0xcd, 0xab, 0x9e, 0x93, 0x86,
	0xd7, 0x3f, 0xd5, 0x19, 0x7f, 0x56, 0x67, 0x9c, 0x75, 0xf9, 0x5c, 0x67, 0xcd, 0x1c, 0x25, 0x7c,
	0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x34, 0xe5, 0x5c, 0xec, 0x02, 0x00, 0x00,
}
